local k = import "../Kubernetes.json";

local apps = [
    {
    image: "griffinhtdocker/ip-server:latest",
    name: "ip-server",
    ports: [
      {
        containerPort: 8000,
        name: "http"
      }
    ],
    readinessProbe: {
      httpGet: {
        path: "/",
        port: "http"
      }
    }
  },
  {
    image: "quay.io/redlib/redlib:latest",
    name: "redlib",
    ports: [
      {
        containerPort: 8080,
        name: "http"
      }
    ]
  },
  {
    image: "kennethreitz/httpbin",
    name: "httpbin",
    ports: [
      {
        containerPort: 80,
        name: "http"
      }
    ],
  },
  {
    "name": "speedtest",
    "image": "ghcr.io/librespeed/speedtest:latest",
    "env": [
      {
        "name": "MODE",
        "value": "standalone"
      }
    ],
    "ports": [
      {
        "containerPort": 80,
        "name": "http"
      }
    ]
  },
  {
    "name": "searxng",
    "image": "docker.io/searxng/searxng",
    "ports": [
        {
            "containerPort": 8080,
            "name": "http"
        }
    ]
  }
];

local Service(name) = {
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": name,
  },
  "spec": {
    "selector": {
      "app.kubernetes.io/name": name,
    },
    "ports": [
      {
        "port": 80,
        "targetPort": "http"
      }
    ]
  }
};

local NetworkPolicy(name) = {
  "apiVersion": "networking.k8s.io/v1",
  "kind": "NetworkPolicy",
  "metadata": {
    "name": name,
  },
  "spec": {
    "podSelector": {
      "matchLabels": {
        "app.kubernetes.io/name": name,
      }
    },
    "policyTypes": [
      "Ingress"
    ],
    "ingress": [
      {
        "from": [
          {
            "podSelector": {
              "matchLabels": {
                "app.kubernetes.io/name": "caddy"
              }
            }
          }
        ]
      }
    ]
  }
};

[
  k.Deployment(app.name, { containers: [ k.Container(app) ] })
  for app in apps
] + [
  NetworkPolicy(app.name)
  for app in apps
] + [
  Service(app.name)
  for app in apps
]

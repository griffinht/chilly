local k = import '../Kubernetes.json';

local prometheus_config = 'prometheus-config2';
local grafana_config = 'grafana-config';

local name = 'grafana';

local deployment = k.Deployment(name, {
  containers: [
        k.Container(name, {
      image: 'docker.io/grafana/grafana-oss',
      ports: [
        {
          containerPort: 3000,
          name: 'http',
        },
      ],
      env: [
        {
          name: 'GF_AUTH_PROXY_ENABLED',
          value: 'true'
        },
        {
          name: 'GF_AUTH_PROXY_HEADER_NAME',
          value: 'x-forwarded-user'
        },
        {
          name: 'GF_SECURITY_ADMIN_USER',
          # this is my (griffin's) user id from logto
          value: '276837198664956568'
        }
      ],
      // /api/health
      volumeMounts: [
        {
          mountPath: '/var/lib/grafana',
          name: 'grafana',
        },
      ],
    }),
  ],
  # grafana runs as non root
  # we need to mount grafana's volumes owned by the grafana user (uid 472)
  # by default they are owned by root
  securityContext: {
    fsGroup: 472,
  },
  volumes: [
    /*
    {
      name: 'prometheus',
      persistentVolumeClaim: {
        claimName: 'prometheus',
      },
    },*/
    {
      name: 'grafana',
      persistentVolumeClaim: {
        claimName: 'grafana',
      },
    },
    {
      name: 'prometheus-config',
      configMap: {
        name: prometheus_config,
        items: [
          {
            key: 'prometheus.json',
            path: 'prometheus.json',
          },
        ],
      },
    },
    {
      name: 'grafana-config',
      configMap: {
        name: grafana_config,
        items: [
          # todo i bet i dont need this
          {
            key: 'grafana.ini',
            path: 'grafana.ini',
          },
        ],
      },
    },
  ],
}) + {
  spec+: {
    strategy: {
      type: 'Recreate'
    }
  }
};


local deployment_prom = k.Deployment('prometheus', {
  containers: [
    k.Container('prometheus', {
      image: 'docker.io/prom/prometheus',
      ports: [
        {
          containerPort: 9090,
          name: 'http',
        },
      ],
      args: [
        '--config.file=/config/prometheus.json',
      ],
      volumeMounts: [
        {
          mountPath: '/prometheus',
          name: 'prometheus',
        },
        {
          # todo it should be readonly?
          mountPath: '/config',
          name: 'prometheus-config',
        },
      ],
    }),
  ],
  securityContext: {
    #runAsUser: 0,
    #runAsGroup: 0,
    fsGroup: 65534,
  },
  volumes: [
    {
      name: 'prometheus',
      persistentVolumeClaim: {
        claimName: 'prometheus',
      },
    },
    {
      name: 'prometheus-config',
      configMap: {
        name: prometheus_config,
        items: [
          {
            key: 'prometheus.json',
            path: 'prometheus.json',
          },
        ],
      },
    },
  ],
}) + {
  spec+: {
    strategy: {
      type: 'Recreate'
    }
  }
};

k.List([
  deployment,
  k.Service(name),
  k.NetworkPolicy(name),
  k.PersistentVolumeClaim('grafana', '1Gi'),

  deployment_prom,
  k.ConfigMap(prometheus_config, {
    'prometheus.json': importstr 'prometheus.json'
  }),
  k.PersistentVolumeClaim('prometheus', '1Gi'),
  k.Service('prometheus'),
  k.NetworkPolicy('prometheus'),
])
